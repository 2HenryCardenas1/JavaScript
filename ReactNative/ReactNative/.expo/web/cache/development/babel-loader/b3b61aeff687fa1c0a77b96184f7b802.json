{"ast":null,"code":"export function getValueWithNonCurrencyMask(_ref) {\n  var value = _ref.value,\n      mask = _ref.mask;\n  var unmasked = value.replace(/[^0-9A-Za-z]/g, '');\n  var positions = [];\n\n  for (var i = 0; i < mask.length; i++) {\n    if (mask[i].match(/[^0-9A-Za-z]/)) {\n      positions.push(i);\n    }\n  }\n\n  var newValue = '';\n  var offset = 0;\n\n  for (var j = 0; j < unmasked.length; j++) {\n    while ((_mask = mask[j + offset]) != null && _mask.match(/[^0-9A-Za-z]/)) {\n      var _mask;\n\n      newValue += mask[j + offset];\n      offset++;\n    }\n\n    newValue += unmasked[j];\n  }\n\n  return newValue;\n}\n\nfunction getCurrencyDividerAndDecimal(divider) {\n  if (divider === ',') {\n    return {\n      divider: ',',\n      decimal: '.'\n    };\n  } else return {\n    divider: '.',\n    decimal: ','\n  };\n}\n\nexport function getValueWithCurrencyMask(_ref2) {\n  var value = _ref2.value,\n      newValue = _ref2.newValue,\n      currencyDivider = _ref2.currencyDivider;\n\n  var _getCurrencyDividerAn = getCurrencyDividerAndDecimal(currencyDivider),\n      divider = _getCurrencyDividerAn.divider,\n      decimal = _getCurrencyDividerAn.decimal;\n\n  if (value !== undefined) {\n    if (!newValue.includes(decimal)) {\n      var _newValue, _newValue$replace;\n\n      if (((_newValue = newValue) == null ? void 0 : (_newValue$replace = _newValue.replace(/[,.]/g, '')) == null ? void 0 : _newValue$replace.length) > 3) {\n        var arr = [];\n        var unmasked = newValue.replace(/[,.]/g, '');\n\n        for (var i = 0; i < unmasked.length; i += 3) {\n          arr.push(unmasked.split('').splice(unmasked.length - i, 3).join(''));\n        }\n\n        arr = arr.reverse();\n        arr.pop();\n        var initial = arr.join('');\n\n        if (unmasked.includes(initial)) {\n          unmasked = unmasked.replace(initial, '');\n        }\n\n        newValue = unmasked + divider + arr.join(divider);\n      } else {\n        var _newValue2;\n\n        newValue = (_newValue2 = newValue) == null ? void 0 : _newValue2.replace(/[,.]/g, '');\n      }\n    } else {\n      var _newValue3, _newValue4;\n\n      if (((_newValue3 = newValue) == null ? void 0 : _newValue3.split(decimal).length) > 2 || (_newValue4 = newValue) != null && _newValue4.split(decimal)[1].includes(divider)) {\n        return value;\n      }\n    }\n  }\n\n  return newValue;\n}","map":{"version":3,"names":["getValueWithNonCurrencyMask","value","mask","unmasked","replace","positions","i","length","match","push","newValue","offset","j","getCurrencyDividerAndDecimal","divider","decimal","getValueWithCurrencyMask","currencyDivider","undefined","includes","arr","split","splice","join","reverse","pop","initial"],"sources":["C:/repositorios/JavaScript/ReactNative/ReactNative/node_modules/react-native-floating-label-input/src/utils.tsx"],"sourcesContent":["type Mask = string;\r\ntype CurrencyDivider = ',' | '.';\r\n\r\ntype CurrencyMaskTypeArgs = {\r\n  value: string;\r\n  newValue: string;\r\n  currencyDivider: CurrencyDivider | undefined;\r\n  maxDecimalPlaces: number | undefined;\r\n};\r\n\r\ntype NonCurrencyMaskTypeArgs = {\r\n  value: string;\r\n  mask: Mask;\r\n};\r\n\r\ntype ResultType = string | undefined;\r\n\r\nexport function getValueWithNonCurrencyMask({\r\n  value,\r\n  mask,\r\n}: NonCurrencyMaskTypeArgs): ResultType {\r\n  const unmasked = value.replace(/[^0-9A-Za-z]/g, '');\r\n\r\n  // mark positions of special characters\r\n  const positions: number[] = [];\r\n  for (let i = 0; i < mask.length; i++) {\r\n    if (mask[i].match(/[^0-9A-Za-z]/)) {\r\n      positions.push(i);\r\n    }\r\n  }\r\n\r\n  let newValue = '';\r\n  let offset = 0;\r\n  for (let j = 0; j < unmasked.length; j++) {\r\n    // add special characters\r\n    while (mask[j + offset]?.match(/[^0-9A-Za-z]/)) {\r\n      newValue += mask[j + offset];\r\n      offset++;\r\n    }\r\n    newValue += unmasked[j];\r\n  }\r\n\r\n  return newValue;\r\n}\r\n\r\nfunction getCurrencyDividerAndDecimal(divider: CurrencyDivider | undefined) {\r\n  if (divider === ',') {\r\n    return {\r\n      divider: ',' as const,\r\n      decimal: '.' as const,\r\n    };\r\n  } else\r\n    return {\r\n      divider: '.' as const,\r\n      decimal: ',' as const,\r\n    };\r\n}\r\n\r\nexport function getValueWithCurrencyMask({\r\n  value,\r\n  newValue,\r\n  currencyDivider,\r\n}: CurrencyMaskTypeArgs): ResultType {\r\n  const { divider, decimal } = getCurrencyDividerAndDecimal(currencyDivider);\r\n\r\n  if (value !== undefined) {\r\n    if (!newValue.includes(decimal)) {\r\n      if (newValue?.replace(/[,.]/g, '')?.length > 3) {\r\n        let arr: string[] = [];\r\n        let unmasked = newValue.replace(/[,.]/g, '');\r\n        for (let i = 0; i < unmasked.length; i += 3) {\r\n          arr.push(\r\n            unmasked\r\n              .split('')\r\n              .splice(unmasked.length - i, 3)\r\n              .join(''),\r\n          );\r\n        }\r\n\r\n        arr = arr.reverse();\r\n        arr.pop();\r\n        const initial = arr.join('');\r\n        if (unmasked.includes(initial)) {\r\n          unmasked = unmasked.replace(initial, '');\r\n        }\r\n        newValue = unmasked + divider + arr.join(divider);\r\n      } else {\r\n        newValue = newValue?.replace(/[,.]/g, '');\r\n      }\r\n    } else {\r\n      if (\r\n        newValue?.split(decimal).length > 2 ||\r\n        newValue?.split(decimal)[1].includes(divider)\r\n      ) {\r\n        return value;\r\n      }\r\n    }\r\n  }\r\n\r\n  return newValue;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}